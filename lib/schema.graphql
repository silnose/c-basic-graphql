"Validate types of levels"
enum Level {
  beginners
  intermediate
  advanced
}

union GlobalSearch = Course | Student | Mentor

"Courses"
type Course {
  "Course Indentifier"
  _id: ID!
  "Course Title"
  title: String!
  "Main teacher of the Course"
  teacher: String
  "Small description about the course"
  description: String!
  "Tags"
  topic: String @deprecated
  people: [Person]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

"Student"
type Student implements Person {
  _id: ID!
  "Student full name"
  name: String!
  "Student personal email"
  email: String!
  avatar: String
}

type Mentor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}
input CourseCreateInput {
  "Course Title"
  title: String!
  "Main teacher of the Course"
  teacher: String!
  "Small description about the course"
  description: String!
  "Tags"
  topic: String
  level: Level
}

input CourseEditInput {
  "Course Title"
  title: String
  "Main teacher of the Course"
  teacher: String
  "Small description about the course"
  description: String
  "Tags"
  topic: String
}

input PersonCreateInput {
  "Person full name"
  name: String!
  "Person personal email"
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  "Person full name"
  name: String
  "Person personal email"
  email: String
  phone: String
  avatar: String
}

"Operaciones para consultar informacion"
type Query {
  "Return all courses on the platform"
  getCourses: [Course]
  "Return one specific course on the platform"
  getCourse(id: ID!): Course
  "Return all Person on the platform"
  getPeople: [Person]
  "Return one specific Person on the platform"
  getPerson(id: ID!): Person
  "global search"
  searchItems(keyword: String!): [GlobalSearch]
}

"Operaciones para almacenar informacion"
type Mutation {
  "Create a course"
  createCourse(input: CourseCreateInput!): Course
  "Edit a course"
  editCourse(id: ID!, input: CourseEditInput!): Course
  "Remove a course"
  removeCourse(id: ID!): Course
  "Create a person"
  createPerson(input: PersonCreateInput!): Person
  "Edit a person"
  editPerson(id: ID!, input: PersonEditInput!): Person
  "Remove a person"
  removePerson(id: ID!): Person
  "Add a person to a coruse"
  addPeople(courseID: ID!, personID: ID!): Course
}
